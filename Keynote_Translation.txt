18：11
主旨：软件在倒退   我们无处不需要软件  我想让你们明白这些  从内部观察崩塌很缓慢
20：37
AlphaGo、面部滤镜等等  多是因为硬件在变快  机器学习算法比按按键容易多了
20：

26：50 这就是在几天之内！     ？我得阻止这些。？
28：03 每天 试着自己数数
29：38 “市场不会为之买单的！”  也许。但是如果你从没见过生产牢靠软件的工业，你凭什么认为他能生产出来？
30：39  软件创业公司进入市场步履蹒跚，不能很好的研究软件科学  对比传统硬件“科技”公司vs软件“科技公司”
31：46 干扰序列  机器语言 汇编语言 Fortran/C/C++   C#/Haskell/Javascript  “我在一个更高级别的干扰下工作！更智能！更省力！”
32：45 反面：能力的丧失  不会在汇编里写程序  不知道变量怎么储存在内存里  不知道CPU在干什么  不会用非托管语言  甚至非托管语言也害怕指针（“现代C++”） 开脱的修辞是“我不应该需要”“我更智能”，但是另一面是能力的丧失
34：38 这是“为了生产力”但是...生产力正趋近于0.
34：53 Ken Thompson在VCF East 2019
37:46 *耐用度在下降  *生产力在下降  软件在进步这个论证很明显是错误的。
37：11 为什么这不好？  我们增加了过多的复杂性
37：22  “你不能简单地...”  从一台计算机复制程序到另一台  （现在你需要一个安装程序/flatpak/“容器”）  为什么你需要容器？  不是因为CPU  操作系统从CPU中*移除能力*  还有着色器语言...口区
40：29 “你不能简单地”复制一个程序  静态链接  往屏幕上画像素  写着色器  不用清单编译程序  运行一个未签名的程序
41：05  vswhere...天哪  “你不能做一个只做编译和链接的独立程序”
42：39 LSP是恶魔  一个更复杂更慢的库
44：12  
44：41  PC游戏甚至不能  稳定地在全屏下运行  渲染出帧数顺滑的画面  
45：26  复杂化加速知识丢失  *需要知道更多，所以你会知道知识的比例更小  *深刻的知识被琐事所替代  深：缓存一致性怎么运作  琐事：怎么能使Unity这坨东西 *好信息被噪音淹没  不能谷歌上搜索  越难理解，看到的坏观点越多
47：30  越复杂，越难在灾难或者制度倒退中存活。  我们真的相信我们能处理的上限是无穷的吗？我们装作是。  它不是无穷的，它是多少？你怎么知道？  如果有一个合理复杂度的点，我们是否已经越过了那个点？怎么知道？  需要考虑代际传递的困难性。
48：06  跟游戏有什么关系？他们又不严肃！
48：15  电子游戏过去是关于压榨设备极限的。  现在整个行业都转向Unity/虚幻。  拿独立游戏来举例子，我们有一代程序员从小就不知道怎么做低级的事。
49：08  “我们变得更智能，减少开发时间！”也许，但是...同时也放弃能力。与世隔绝没问题，如果所有人都这样就不好了。
49：46  只有精英会读写。这些技能不是广泛传播的，所以他们脆弱。  几乎没有人知道CPU里发生了什么。  这个技能没有广泛传播，所以它脆弱。
52：02  我们真的认为这个我们建造的极其复杂的东西，莫名其妙地比青铜时代的更稳健？  为什么我们会在压力下幸存？  -切断网络  -供应链限制
